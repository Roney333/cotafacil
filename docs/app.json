[{"name":"app.R","content":"# ========================================================================\r\n# APLICAÇÃO SHINY PARA PROCESSAMENTO DE PDF DE PESQUISA DE PREÇO\r\n# ADAPTADA PARA SHINYLIVE (SEM PDFTOOLS) COM FALLBACK LOCAL OPCIONAL\r\n# ========================================================================\r\n\r\n# --- 1. Carregar Todas as Bibliotecas Necessárias ---\r\nlibrary(shiny)\r\n# library(pdftools)  # <- REMOVIDO: usaremos pdf.js no ShinyLive e fallback opcional\r\nlibrary(stringr)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(openxlsx)\r\nlibrary(bslib)\r\n\r\n# --- AUMENTAR LIMITE DE UPLOAD PARA 100MB ---\r\noptions(shiny.maxRequestSize = 100 * 1024^2)\r\n\r\n# =============================================================================\r\n# UTIL: OBTÉM TEXTO DAS PÁGINAS DO PDF\r\n# - No ShinyLive: usa input$pdf_text_pages (preenchido via pdf.js no navegador)\r\n# - Localmente: tenta usar pdftools::pdf_text() se disponível\r\n# =============================================================================\r\nget_pdf_text_pages <- function(local_path, webr_pages) {\r\n  # 1) Prioridade: texto vindo do navegador (ShinyLive)\r\n  if (!is.null(webr_pages) && length(webr_pages) > 0) {\r\n    return(webr_pages)\r\n  }\r\n  # 2) Fallback local: pdftools, se instalado\r\n  if (requireNamespace(\"pdftools\", quietly = TRUE)) {\r\n    return(pdftools::pdf_text(local_path))\r\n  }\r\n  stop(\"Nenhum mecanismo de leitura de PDF disponível. \"\r\n       ,\"No ShinyLive o texto deve vir do navegador; localmente, instale o pacote 'pdftools'.\")\r\n}\r\n\r\n# ===================================================================================\r\n# INÍCIO DA LÓGICA DO SCRIPT ORIGINAL (INALTERADA, SÓ RECEBE TEXTO AO INVÉS DE CAMINHO)\r\n# ===================================================================================\r\n\r\n# --- FUNÇÃO ESPECIALISTA PARA FORMATOS A/B (com lógicas separadas) ---\r\nextract_format_AB <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  for (i in seq_along(all_lines)) {\r\n    line <- all_lines[i]\r\n    if (str_detect(line, \"R\\\\$\\\\s*[\\\\d.,]+\") && str_detect(line, \"\\\\d{2}/\\\\d{2}/\\\\d{4}\")) {\r\n      inciso_match <- str_match(line, \"^\\\\s*\\\\d+\\\\s+([IVXLCDM]+)\")\r\n      inciso <- if (!is.na(inciso_match[1,2])) inciso_match[1,2] else \"\"\r\n      if (inciso == \"I\") {\r\n        tokens <- str_squish(line) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n        preco_simbolo_idx <- which(str_detect(tokens, \"R\\\\$\"))[1]\r\n        if (is.na(preco_simbolo_idx)) next\r\n        preco_unitario <- str_remove(tokens[preco_simbolo_idx], \"R\\\\$\")\r\n        if (nchar(preco_unitario) == 0 && length(tokens) > preco_simbolo_idx) {\r\n          preco_unitario <- tokens[preco_simbolo_idx + 1]\r\n        }\r\n        if (length(tokens) >= 5) {\r\n          n_cotacao <- tokens[1]\r\n          inciso_val <- tokens[2]\r\n          compone <- tokens[length(tokens)]\r\n          data_cotacao <- tokens[length(tokens) - 1]\r\n          payload_tokens <- tokens[3:(preco_simbolo_idx - 1)]\r\n          quantidade_idx_in_payload <- -1\r\n          for (j in 1:length(payload_tokens)) {\r\n            if (str_detect(payload_tokens[j], \"^[\\\\d\\\\.]+$\")) {\r\n              quantidade_idx_in_payload <- j\r\n              break\r\n            }\r\n          }\r\n          nome_na_linha <- \"\"\r\n          if (quantidade_idx_in_payload > 1) {\r\n            nome_na_linha <- paste(payload_tokens[1:(quantidade_idx_in_payload - 1)], collapse = \" \")\r\n          }\r\n          if (quantidade_idx_in_payload != -1) {\r\n            quantidade <- payload_tokens[quantidade_idx_in_payload]\r\n            if (quantidade_idx_in_payload < length(payload_tokens)) {\r\n              unidade <- paste(payload_tokens[(quantidade_idx_in_payload + 1):length(payload_tokens)], collapse = \" \")\r\n            } else {\r\n              unidade <- \"\"\r\n            }\r\n          } else {\r\n            quantidade <- \"N/A\"\r\n            unidade <- \"N/A\"\r\n          }\r\n          nome_partes_superiores <- c()\r\n          for (j in (i - 1):max(1, i - 4)) {\r\n            if (str_detect(all_lines[j], \"Nº\\\\s+Inciso\\\\s+Nome\")) break\r\n            nome_partes_superiores <- c(str_squish(all_lines[j]), nome_partes_superiores)\r\n          }\r\n          nome_completo <- str_squish(paste(paste(nome_partes_superiores, collapse=\" \"), nome_na_linha, collapse=\" \"))\r\n          if (nchar(nome_completo) > 0 && !str_detect(nome_completo, \"Compras\\\\.gov\\\\.br\")) {\r\n            nome_completo <- paste(nome_completo, \"Compras.gov.br\")\r\n          }\r\n          preco_numerico <- as.numeric(str_replace(preco_unitario, \",\", \".\"))\r\n          preco_formatado <- if (!is.na(preco_numerico)) {\r\n            str_replace(sprintf(\"%.4f\", preco_numerico), \"\\\\.\", \",\")\r\n          } else {\r\n            preco_unitario\r\n          }\r\n          all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(\r\n            `Número da Pesquisa`=state_vars$numero_pesquisa, UASG=state_vars$uasg, `Título da Pesquisa`=state_vars$titulo,\r\n            Item=state_vars$item_num, CATMAT=state_vars$catmat, `Descrição do Item`=state_vars$item_desc,\r\n            `Nº Cotação`=n_cotacao, Inciso=inciso_val, Nome=nome_completo, Quantidade=quantidade, Unidade=unidade,\r\n            `Preço unitário`=preco_formatado, Data=data_cotacao, Compõe=compone,\r\n            `Endereço Eletrônico` = NA_character_, Anexo = NA_character_\r\n          )\r\n        }\r\n      } else {\r\n        match <- str_match(line, \"(.*)(R\\\\$\\\\s*[\\\\d.,]+)\\\\s+(\\\\d{2}/\\\\d{2}/\\\\d{4})\\\\s+(\\\\w+)$\")\r\n        if (!is.na(match[1,1])) {\r\n          restante <- str_squish(match[1,2])\r\n          preco_unitario <- str_remove_all(match[1,3], \"[R$\\\\s]\")\r\n          data_cotacao <- match[1,4]\r\n          compone <- match[1,5]\r\n          n_cotacao <- str_extract(restante, \"^\\\\d+\")\r\n          match_resto <- str_match(restante, \"^\\\\d+\\\\s+[IVXLCDM]+\\\\s+(.*?)\\\\s+([\\\\d\\\\.,]+)$\")\r\n          nome_na_linha <- \"\"\r\n          quantidade <- \"\"\r\n          if(!is.na(match_resto[1,1])){\r\n            nome_na_linha <- str_squish(match_resto[1,2])\r\n            quantidade <- str_remove_all(match_resto[1,3], \"[\\\\.,]\")\r\n          }\r\n          unidade <- \"\"\r\n          nome_partes_superiores <- c()\r\n          if (i > 1) {\r\n            for (j in (i - 1):max(1, i - 2)) {\r\n              linha_superior <- all_lines[j]\r\n              if (str_detect(linha_superior, \"Nº\\\\s+Inciso\\\\s+Nome\")) break\r\n              if (nchar(str_squish(linha_superior)) > 0) {\r\n                nome_partes_superiores <- c(str_squish(linha_superior), nome_partes_superiores)\r\n              }\r\n            }\r\n          }\r\n          nome_parte_inferior <- \"\"\r\n          if ((i + 1) <= length(all_lines)) {\r\n            linha_inferior <- all_lines[i+1]\r\n            if (!str_detect(linha_inferior, \"Nº\\\\s+Inciso\") && !str_detect(linha_inferior, \"R\\\\$\\\\s*\") && !str_detect(linha_inferior, \"^\\\\s*Data da Cotação\") && !str_detect(linha_inferior, \"^\\\\s*Id da Compra\") && nchar(str_squish(linha_inferior)) > 0) {\r\n              nome_parte_inferior <- str_squish(linha_inferior)\r\n            }\r\n          }\r\n          nome_completo <- str_squish(paste(paste(nome_partes_superiores, collapse=\" \"), nome_na_linha, nome_parte_inferior, collapse=\" \"))\r\n          nome_completo <- str_remove(nome_completo, \"\\\\s*-\\\\s*CNPJ.*$\")\r\n          preco_numerico <- as.numeric(str_replace(preco_unitario, \",\", \".\"))\r\n          preco_formatado <- if (!is.na(preco_numerico)) {\r\n            str_replace(sprintf(\"%.4f\", preco_numerico), \"\\\\.\", \",\")\r\n          } else {\r\n            preco_unitario\r\n          }\r\n          endereco_eletronico <- NA_character_\r\n          anexo <- NA_character_\r\n          if (str_detect(nome_completo, \"Mídias Especializadas\")) {\r\n            search_window_start <- i + 1\r\n            search_window_end <- min(i + 15, length(all_lines))\r\n            if (search_window_start <= search_window_end) {\r\n              search_block <- paste(all_lines[search_window_start:search_window_end], collapse = \" \\n \")\r\n              anexo_match <- str_match(search_block, \"(ITEM\\\\s+\\\\d+[\\\\s\\\\d]*\\\\.pdf)\")\r\n              if (!is.na(anexo_match[1, 1])) {\r\n                anexo <- str_squish(anexo_match[1, 1])\r\n              }\r\n              if (str_detect(search_block, \"https?://\")) {\r\n                url_block <- search_block\r\n                if (!is.na(anexo)) {\r\n                  url_block <- str_remove(url_block, fixed(anexo))\r\n                }\r\n                url_block <- str_split(url_block, \"Nº\\\\s+Inciso\\\\s+Nome|Legenda:\")[[1]][1]\r\n                url_block <- str_remove_all(url_block, \"\\\\d{2}:\\\\d{2}\")\r\n                url_block <- str_remove_all(url_block, \"Endereço Eletrônico|Anexos|Hora da Cotação|Data da Cotação|Marca/Modelo|Informações Adicionais\")\r\n                url_match <- str_match(url_block, \"(https?://[\\\\s\\\\S]*)\")\r\n                if(!is.na(url_match[1,2])){\r\n                  potential_url <- url_match[1,2]\r\n                  endereco_eletronico <- str_replace_all(potential_url, \"\\\\s+\", \"\")\r\n                }\r\n              }\r\n            }\r\n          }\r\n          all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(\r\n            `Número da Pesquisa`=state_vars$numero_pesquisa, UASG=state_vars$uasg, `Título da Pesquisa`=state_vars$titulo,\r\n            Item=state_vars$item_num, CATMAT=state_vars$catmat, `Descrição do Item`=state_vars$item_desc,\r\n            `Nº Cotação`=n_cotacao, Inciso=inciso, Nome=nome_completo, Quantidade=quantidade, Unidade=unidade,\r\n            `Preço unitário`=preco_formatado, Data=data_cotacao, Compõe=compone,\r\n            `Endereço Eletrônico` = endereco_eletronico, Anexo = anexo\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\n# --- FUNÇÃO ESPECIALISTA PARA FORMATO C (o formato complexo) ---\r\nextract_format_C <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  for (i in seq_along(all_lines)) {\r\n    line <- all_lines[i]\r\n    if (str_detect(line, \"Cotação de preços para o item\")) {\r\n      fornecedor <- str_match(line, \"Fornecedor: (.*?) - CNPJ:\")[,2]\r\n      linha_inciso <- \"\"\r\n      linha_financeira <- \"\"\r\n      for (j in (i + 1):min(i + 10, length(all_lines))) {\r\n        if (str_detect(all_lines[j], \"^\\\\s*\\\\d+\\\\s+[IVXLCDM]+\")) {\r\n          linha_inciso <- all_lines[j]\r\n        }\r\n        if (str_detect(all_lines[j], \"R\\\\$\")) {\r\n          linha_financeira <- all_lines[j]\r\n          break\r\n        }\r\n      }\r\n      if (nchar(linha_inciso) > 0 && nchar(linha_financeira) > 0) {\r\n        n_cotacao <- str_match(linha_inciso, \"^\\\\s*(\\\\d+)\")[,2]\r\n        inciso <- str_match(linha_inciso, \"^\\\\s*\\\\d+\\\\s+([IVXLCDM]+)\")[,2]\r\n        tokens_financeiro <- str_squish(linha_financeira) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n        quantidade <- tokens_financeiro[1]\r\n        preco_unitario <- str_remove(tokens_financeiro[2], \"R\\\\$\")\r\n        data_cotacao <- tokens_financeiro[3]\r\n        compone <- tokens_financeiro[4]\r\n        preco_numerico <- as.numeric(str_replace(preco_unitario, \",\", \".\"))\r\n        preco_formatado <- if (!is.na(preco_numerico)) {\r\n          str_replace(sprintf(\"%.4f\", preco_numerico), \"\\\\.\", \",\")\r\n        } else {\r\n          preco_unitario\r\n        }\r\n        all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(\r\n          `Número da Pesquisa`=state_vars$numero_pesquisa, UASG=state_vars$uasg, `Título da Pesquisa`=state_vars$titulo,\r\n          Item=state_vars$item_num, CATMAT=state_vars$catmat, `Descrição do Item`=state_vars$item_desc,\r\n          `Nº Cotação`=n_cotacao, Inciso=inciso, Nome=fornecedor, Quantidade=quantidade, Unidade=\"N/I\",\r\n          `Preço unitário`=preco_formatado, Data=data_cotacao, Compõe=compone,\r\n          `Endereço Eletrônico` = NA_character_, Anexo = NA_character_\r\n        )\r\n      }\r\n    }\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\n# --- FUNÇÃO PRINCIPAL / O \"DETETIVE\" (agora recebe vetor de páginas) ---\r\nextract_price_data_from_pages <- function(text_from_pages) {\r\n  full_text <- paste(text_from_pages, collapse = \"\\n\")\r\n  all_lines <- unlist(str_split(full_text, \"\\n\"))\r\n  state_vars <- list(numero_pesquisa=NA, uasg=NA, titulo=NA, item_num=NA, catmat=NA, item_desc=NA)\r\n  final_results <- list()\r\n  pesquisa_starts <- which(str_detect(all_lines, \"Relatório de pesquisa de preço\"))\r\n  pesquisa_starts <- c(pesquisa_starts, length(all_lines) + 1)\r\n  for (p in 1:(length(pesquisa_starts) - 1)) {\r\n    start_line <- pesquisa_starts[p]\r\n    end_line <- pesquisa_starts[p+1] - 1\r\n    pesquisa_lines <- all_lines[start_line:end_line]\r\n    header_idx <- which(str_detect(pesquisa_lines, \"Número da Pesquisa\\\\s+UASG\"))\r\n    if(length(header_idx) > 0) {\r\n      data_line <- pesquisa_lines[header_idx[1] + 1]\r\n      parts <- str_squish(data_line) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n      if(length(parts) >= 2) { state_vars$numero_pesquisa <- parts[1]; state_vars$uasg <- parts[2] }\r\n    }\r\n    titulo_idx <- which(str_detect(pesquisa_lines, \"^\\\\s*Título:\"))\r\n    if(length(titulo_idx) > 0) { state_vars$titulo <- str_remove(pesquisa_lines[titulo_idx[1]], \"Título:\") %>% str_squish() }\r\n    item_starts <- which(str_detect(pesquisa_lines, \"^\\\\s*Item:\\\\s*\\\\d+\"))\r\n    item_starts <- c(item_starts, length(pesquisa_lines) + 1)\r\n    for (k in 1:(length(item_starts) - 1)) {\r\n      item_start_line <- item_starts[k]\r\n      item_end_line <- item_starts[k+1] - 1\r\n      item_lines <- pesquisa_lines[item_start_line:item_end_line]\r\n      state_vars$item_num <- str_extract(item_lines[1], \"\\\\d+\")\r\n      desc_start_idx <- which(str_detect(item_lines, \"Descrição do item\"))\r\n      desc_end_idx <- which(str_detect(item_lines, \"Consolidação dos preços cotados\"))\r\n      if (length(desc_start_idx) > 0 && length(desc_end_idx) > 0) {\r\n        full_desc <- paste(item_lines[(desc_start_idx[1]+1):(desc_end_idx[1]-1)], collapse=\" \") %>% str_squish()\r\n        desc_matches <- str_match(full_desc, \"^(\\\\d+)\\\\s*-\\\\s*(.*)\")\r\n        if(!is.na(desc_matches[1,1])) { state_vars$catmat <- desc_matches[1,2]; state_vars$item_desc <- desc_matches[1,3] }\r\n        else { state_vars$catmat <- \"N/A\"; state_vars$item_desc <- full_desc }\r\n      }\r\n      item_text <- paste(item_lines, collapse=\"\\n\")\r\n      if (str_detect(item_text, \"Cotação de preços para o item\")) {\r\n        final_results <- c(final_results, extract_format_C(item_lines, state_vars))\r\n      } else {\r\n        final_results <- c(final_results, extract_format_AB(item_lines, state_vars))\r\n      }\r\n    }\r\n  }\r\n  if (length(final_results) > 0) return(dplyr::distinct(dplyr::bind_rows(final_results)))\r\n  else return(data.frame())\r\n}\r\n\r\n# --- Função de Extração de Medianas (agora recebe vetor de páginas) ---\r\nextract_all_pdf_medians_from_pages <- function(pdf_pages_vec) {\r\n  full_pdf_text <- paste(pdf_pages_vec, collapse = \"\\n\\n\")\r\n  blocks <- str_split(full_pdf_text, \"Item:\\\\s*\")[[1]]\r\n  if (length(blocks) < 2) {\r\n    stop(\"ERRO: Nenhum 'Item:' foi encontrado para dividir o documento. A extração não pode continuar.\")\r\n  }\r\n  item_blocks <- blocks[-1]\r\n  results_df <- tibble::tibble(Item = integer(), `MEDIANA (PAINEL DE PREÇOS)` = double())\r\n  for (block in item_blocks) {\r\n    item_number <- as.integer(str_extract(block, \"^\\\\d+\"))\r\n    median_value <- NA_real_\r\n    if (!is.na(item_number)) {\r\n      block_lines <- str_split(block, \"\\n\")[[1]]\r\n      header_line_idx <- which(str_detect(block_lines, \"Menor Preço.*Média.*Mediana\"))\r\n      if (length(header_line_idx) > 0) {\r\n        search_window <- block_lines[(header_line_idx[1] + 1):min(header_line_idx[1] + 5, length(block_lines))]\r\n        for (line in search_window) {\r\n          if (str_count(line, \"R\\\\$\") >= 3) {\r\n            price_values <- str_extract_all(line, \"R\\\\$\\\\s*[\\\\d,.]+\")[[1]]\r\n            if (length(price_values) >= 3) {\r\n              median_str <- price_values[3]\r\n              median_value <- as.numeric(str_replace(str_remove(median_str, \"R\\\\$\\\\s*\"), \",\", \".\"))\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    results_df <- dplyr::bind_rows(results_df, tibble::tibble(Item = item_number, `MEDIANA (PAINEL DE PREÇOS)` = median_value))\r\n  }\r\n  return(results_df)\r\n}\r\n\r\n# ===================================================================================\r\n# PARTE DA INTERFACE DO USUÁRIO (UI)\r\n# ===================================================================================\r\nui <- fluidPage(\r\n  theme = bslib::bs_theme(bootswatch = \"cerulean\"),\r\n  \r\n  # ---- Inclusão do pdf.js (funciona no ShinyLive) ----\r\n  tags$head(\r\n    # pdf.js core + worker (CDN)\r\n    tags$script(src = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"),\r\n    # Worker (config)\r\n    tags$script(HTML(\"\r\n      window.pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n      if (pdfjsLib) {\r\n        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n      }\r\n    \")),\r\n    # Script que lê o arquivo do input e devolve as páginas como texto com quebras de linha\r\n    tags$script(HTML(\"\r\n      (function() {\r\n        function groupItemsIntoLines(items, yTol) {\r\n          // Agrupa por Y (tolerância) e ordena por X para reconstruir linhas\r\n          const lines = [];\r\n          items.forEach(it => {\r\n            const tr = it.transform; // [a,b,c,d,e,f]\r\n            const x = tr[4];\r\n            const y = tr[5];\r\n            let line = lines.find(L => Math.abs(L.y - y) <= yTol);\r\n            if (!line) {\r\n              line = { y: y, chunks: [] };\r\n              lines.push(line);\r\n            }\r\n            line.chunks.push({ x: x, str: it.str });\r\n          });\r\n          // Ordena linhas por Y descendente (topo->base) e chunks por X crescente (esquerda->direita)\r\n          lines.sort((a,b) => b.y - a.y);\r\n          return lines.map(L => {\r\n            L.chunks.sort((a,b) => a.x - b.x);\r\n            return L.chunks.map(c => c.str).join(' ');\r\n          });\r\n        }\r\n\r\n        // Observa mudanças no input #pdf_file\r\n        document.addEventListener('change', async function(e) {\r\n          const tgt = e.target;\r\n          if (!tgt || tgt.id !== 'pdf_file') return;\r\n          const file = tgt.files && tgt.files[0];\r\n          if (!file || !window.pdfjsLib) return;\r\n\r\n          try {\r\n            const buf = await file.arrayBuffer();\r\n            const loadingTask = window.pdfjsLib.getDocument({ data: new Uint8Array(buf) });\r\n            const pdf = await loadingTask.promise;\r\n            const pages = [];\r\n            for (let p = 1; p <= pdf.numPages; p++) {\r\n              const page = await pdf.getPage(p);\r\n              const textContent = await page.getTextContent();\r\n              // Reconstroi linhas:\r\n              const lines = groupItemsIntoLines(textContent.items, 2);\r\n              pages.push(lines.join('\\\\n'));\r\n            }\r\n            // Envia para o R como vetor de strings\r\n            if (window.Shiny && Shiny.setInputValue) {\r\n              Shiny.setInputValue('pdf_text_pages', pages, { priority: 'event' });\r\n            }\r\n          } catch (err) {\r\n            console.error('Falha ao ler PDF via pdf.js:', err);\r\n            if (window.Shiny && Shiny.setInputValue) {\r\n              Shiny.setInputValue('pdf_text_pages_error', String(err), { priority: 'event' });\r\n            }\r\n          }\r\n        }, true);\r\n      })();\r\n    \"))\r\n  ),\r\n  \r\n  titlePanel(\"Ferramenta Para Conferência de Pesquisa de Preços\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      width = 3,\r\n      h4(\"1. Carregar Arquivo\"),\r\n      fileInput(\"pdf_file\", \"Selecione o arquivo PDF:\", accept = c(\".pdf\")),\r\n      \r\n      hr(),\r\n      \r\n      h4(\"2. Processar e Gerar\"),\r\n      actionButton(\"process_button\", \"Processar PDF e Gerar Excel\", icon = icon(\"cogs\"), class = \"btn-primary btn-lg\"),\r\n      \r\n      hr(),\r\n      \r\n      h4(\"3. Baixar Resultado\"),\r\n      uiOutput(\"download_button_ui\"),\r\n      \r\n      br(), hr(), br(),\r\n      div(style = \"text-align: center; font-size: 0.9em;\",\r\n          p(strong(\"Realização:\"), br(), \"Marcos Castaneda - Economista\"),\r\n          p(strong(\"Desenvolvimento:\"), br(), \"Roney Melo - Atuário\")\r\n      )\r\n    ),\r\n    \r\n    mainPanel(\r\n      width = 9,\r\n      hr(),\r\n      h3(icon(\"file-alt\"), \"Instruções e Status\"),\r\n      wellPanel(\r\n        p(\"Bem-vindo! Esta ferramenta automatiza a extração e análise de dados de relatórios de pesquisa de preços em PDF.\"),\r\n        tags$ol(\r\n          tags$li(\"Clique em 'Selecione o arquivo PDF' para carregar o seu documento.\"),\r\n          tags$li(\"Após o nome do arquivo aparecer, clique no botão azul 'Processar PDF e Gerar Excel'.\"),\r\n          tags$li(\"Aguarde a mensagem de status indicar que o processo foi concluído.\"),\r\n          tags$li(\"Um botão de download verde aparecerá. Clique nele para baixar sua planilha.\")\r\n        )\r\n      ),\r\n      br(), hr(),\r\n      h3(icon(\"info-circle\"), \"Este procedimento não elimina a necessidade da realização de uma conferência manual feita pelo responsável.\"),\r\n      hr(),\r\n      h3(icon(\"info-circle\"), \"Status do Processamento\"),\r\n      verbatimTextOutput(\"status_text\"),\r\n      hr()\r\n    )\r\n  )\r\n)\r\n\r\n# ===================================================================================\r\n# PARTE DO SERVIDOR (SERVER)\r\n# ===================================================================================\r\nserver <- function(input, output, session) {\r\n  \r\n  resultado <- reactiveVal(NULL)\r\n  log_text <- reactiveVal(\"Aguardando o upload do arquivo PDF...\")\r\n  \r\n  observeEvent(input$pdf_file, {\r\n    req(input$pdf_file)\r\n    log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' carregado. Pronto para processar.\"))\r\n  })\r\n  \r\n  observeEvent(input$pdf_text_pages_error, ignoreInit = TRUE, {\r\n    log_text(paste(log_text(), \"\\n[AVISO] Falha do leitor PDF no navegador:\", input$pdf_text_pages_error))\r\n  })\r\n  \r\n  output$status_text <- renderText({ log_text() })\r\n  \r\n  observeEvent(input$process_button, {\r\n    req(input$pdf_file)\r\n    \r\n    log_text(\"Iniciando o processo...\\nIsso pode levar alguns segundos.\\n\\n--- LOG DE PROCESSAMENTO ---\")\r\n    \r\n    progress <- shiny::Progress$new()\r\n    on.exit(progress$close(), add = TRUE)\r\n    progress$set(message = \"Processando PDF...\", value = 0)\r\n    \r\n    input_file_path <- input$pdf_file$datapath\r\n    \r\n    tryCatch({\r\n      progress$inc(0.2, detail = \"Extraindo dados do PDF...\")\r\n      log_text(paste(log_text(), \"\\n[1/3] Extraindo dados...\"))\r\n      \r\n      # >>> NOVO: obtém texto das páginas (ShinyLive via pdf.js OU fallback pdftools local)\r\n      text_pages <- get_pdf_text_pages(input_file_path, input$pdf_text_pages)\r\n      \r\n      dados_extracao_pdf <- extract_price_data_from_pages(text_pages)\r\n      \r\n      if (nrow(dados_extracao_pdf) == 0) {\r\n        stop(\"Nenhum dado válido foi extraído do PDF. Verifique o formato do arquivo.\")\r\n      }\r\n      \r\n      progress$inc(0.3, detail = \"Realizando cálculos e conferência...\")\r\n      log_text(paste(log_text(), \"\\n[2/3] Realizando cálculos...\"))\r\n      \r\n      all_pdf_medians <- extract_all_pdf_medians_from_pages(text_pages)\r\n      \r\n      extracao_df <- dados_extracao_pdf\r\n      extracao_df$`Preço unitário` <- as.numeric(gsub(\",\", \".\", as.character(extracao_df$`Preço unitário`)))\r\n      \r\n      base_data <- extracao_df %>%\r\n        filter(Compõe == \"Sim\" & !is.na(`Preço unitário`)) %>%\r\n        group_by(Item) %>%\r\n        arrange(`Nº Cotação`) %>%\r\n        mutate(price_num = paste0(\"PREÇO \", row_number())) %>%\r\n        filter(row_number() <= 3) %>%\r\n        summarise(\r\n          CATMAT = first(CATMAT),\r\n          `Descrição do Item` = first(`Descrição do Item`),\r\n          prices_data = list(tibble::tibble(price_num, `Preço unitário`))\r\n        ) %>%\r\n        tidyr::unnest(prices_data) %>%\r\n        tidyr::pivot_wider(names_from = price_num, values_from = `Preço unitário`) %>%\r\n        ungroup()\r\n      \r\n      price_cols <- c(\"PREÇO 1\", \"PREÇO 2\", \"PREÇO 3\")\r\n      for (col in price_cols) {\r\n        if (!col %in% names(base_data)) {\r\n          base_data[[col]] <- NA_real_\r\n        }\r\n      }\r\n      \r\n      base_data$Item <- as.integer(base_data$Item)\r\n      all_pdf_medians$Item <- as.integer(all_pdf_medians$Item)\r\n      \r\n      dados_conferencia <- base_data %>%\r\n        left_join(all_pdf_medians, by = \"Item\") %>%\r\n        arrange(Item) %>%\r\n        mutate(\r\n          excel_row = row_number() + 2,\r\n          `MÉDIA DOS PREÇOS` = paste0(\"AVERAGE(D\", excel_row, \":F\", excel_row, \")\"),\r\n          `MEDIANA DOS PREÇOS` = paste0(\"MEDIAN(D\", excel_row, \":F\", excel_row, \")\"),\r\n          `DESVIO PADRÃO DOS PREÇOS` = paste0(\"STDEVPA(D\", excel_row, \":F\", excel_row, \")\"),\r\n          `COEFICIENTE DE VARIAÇÃO` = paste0(\"IFERROR(I\", excel_row, \"/G\", excel_row, \", 0)\"),\r\n          `USAR MEDIANA?` = paste0('IF(J', excel_row, '>0.25, \"SIM\", \"NÃO\")'),\r\n          `VALOR DE REFERÊNCIA` = paste0('IF(K', excel_row, '=\"SIM\", H', excel_row, ', G', excel_row, ')'),\r\n          `Valor unitário de referência = ou < que a mediana do Compras?` = paste0('IF(OR(ISBLANK(L', excel_row, '), ISBLANK(M', excel_row, ')), \"Verificar\", IF(L', excel_row, '<=M', excel_row, ', \"ATENDE\", \"NÃO ATENDE\"))')\r\n        )\r\n      \r\n      progress$inc(0.4, detail = \"Montando arquivo Excel...\")\r\n      log_text(paste(log_text(), \"\\n[3/3] Montando o arquivo Excel...\"))\r\n      \r\n      aba1_data <- dados_extracao_pdf %>%\r\n        select(any_of(c('Item','Compõe','Nº Cotação', 'Inciso', 'Nome', 'Quantidade', 'Unidade',\r\n                        'Preço unitário', 'Data', 'Endereço Eletrônico',\r\n                        'Anexo', 'Número da Pesquisa', 'UASG', 'Título da Pesquisa',\r\n                        'CATMAT', 'Descrição do Item')))\r\n      \r\n      if (\"Endereço Eletrônico\" %in% names(aba1_data)) {\r\n        urls <- na_if(aba1_data$`Endereço Eletrônico`, \"\")\r\n        formulas_de_link <- ifelse(!is.na(urls), paste0('=HYPERLINK(\"', urls, '\",\"', urls, '\")'), NA)\r\n        aba1_data$`Endereço Eletrônico` <- formulas_de_link\r\n        class(aba1_data$`Endereço Eletrônico`) <- \"formula\"\r\n      }\r\n      \r\n      output_cols <- c(\"Item\", \"CATMAT\", \"Descrição do Item\", \"PREÇO 1\", \"PREÇO 2\", \"PREÇO 3\", \"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \"COEFICIENTE DE VARIAÇÃO\", \"USAR MEDIANA?\", \"VALOR DE REFERÊNCIA\", \"MEDIANA (PAINEL DE PREÇOS)\", \"Valor unitário de referência = ou < que a mediana do Compras?\")\r\n      aba2_data <- dados_conferencia %>% select(any_of(output_cols))\r\n      \r\n      formula_cols <- c(\"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \"COEFICIENTE DE VARIAÇÃO\", \"USAR MEDIANA?\", \"VALOR DE REFERÊNCIA\", \"Valor unitário de referência = ou < que a mediana do Compras?\")\r\n      for(col in formula_cols){\r\n        class(aba2_data[[col]]) <- \"formula\"\r\n      }\r\n      \r\n      wb <- createWorkbook()\r\n      \r\n      addWorksheet(wb, \"Extração_PDF\")\r\n      header_style_aba1 <- createStyle(textDecoration = \"bold\", fgFill = \"seagreen\", fontColour = \"white\", halign = \"center\", border = \"TopBottomLeftRight\")\r\n      writeData(wb, \"Extração_PDF\", aba1_data, headerStyle = header_style_aba1)\r\n      setColWidths(wb, \"Extração_PDF\", cols = 1:ncol(aba1_data), widths = \"auto\")\r\n      \r\n      addWorksheet(wb, \"Conferência\")\r\n      regra_txt <- \"Regra: Usar média se CV<=25%\"\r\n      col_start_regra <- which(names(aba2_data) == \"DESVIO PADRÃO DOS PREÇOS\")\r\n      col_end_regra <- which(names(aba2_data) == \"USAR MEDIANA?\")\r\n      writeData(wb, \"Conferência\", regra_txt, startCol = col_start_regra, startRow = 1)\r\n      mergeCells(wb, \"Conferência\", cols = col_start_regra:col_end_regra, rows = 1)\r\n      style_regra <- createStyle(halign = \"center\", textDecoration = \"bold\", fgFill = \"#FCE4D6\")\r\n      addStyle(wb, \"Conferência\", style = style_regra, rows = 1, cols = col_start_regra:col_end_regra, gridExpand = TRUE)\r\n      \r\n      header_style_aba2 <- createStyle(textDecoration = \"bold\", fgFill = \"#D9E1F2\", halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\", wrapText = TRUE)\r\n      writeData(wb, \"Conferência\", aba2_data, startRow = 2, headerStyle = header_style_aba2)\r\n      \r\n      currency_style <- createStyle(numFmt = \"R$ #,##0.0000\")\r\n      percent_style <- createStyle(numFmt = \"0.00%\")\r\n      currency_cols <- c(\"PREÇO 1\", \"PREÇO 2\", \"PREÇO 3\", \"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \"VALOR DE REFERÊNCIA\", \"MEDIANA (PAINEL DE PREÇOS)\")\r\n      percent_cols <- c(\"COEFICIENTE DE VARIAÇÃO\")\r\n      \r\n      for(col_name in names(aba2_data)){\r\n        col_idx <- which(names(aba2_data) == col_name)\r\n        if(col_name %in% currency_cols){\r\n          addStyle(wb, \"Conferência\", style = currency_style, rows = 3:(nrow(aba2_data) + 2), cols = col_idx, gridExpand = TRUE, stack = TRUE)\r\n        } else if (col_name %in% percent_cols){\r\n          addStyle(wb, \"Conferência\", style = percent_style, rows = 3:(nrow(aba2_data) + 2), cols = col_idx, gridExpand = TRUE, stack = TRUE)\r\n        }\r\n      }\r\n      setColWidths(wb, \"Conferência\", cols = 1:ncol(aba2_data), widths = \"auto\")\r\n      \r\n      resultado(wb)\r\n      \r\n      progress$inc(0.1, detail = \"Concluído!\")\r\n      log_text(paste(log_text(), \"\\n\\n--- SUCESSO! ---\\nO arquivo Excel foi gerado. Clique no botão de download para baixá-lo.\"))\r\n      \r\n    }, error = function(e) {\r\n      log_text(paste(\"ERRO DURANTE O PROCESSAMENTO:\\n\\n\", e$message))\r\n      resultado(NULL)\r\n    })\r\n  })\r\n  \r\n  output$download_button_ui <- renderUI({\r\n    req(resultado())\r\n    downloadButton(\"download_excel\", \"Baixar Planilha Gerada\", icon = icon(\"download\"), class = \"btn-success btn-lg\")\r\n  })\r\n  \r\n  output$download_excel <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"Extração_\",tools::file_path_sans_ext(input$pdf_file$name), format(Sys.time(), \"_%d-%m-%Y_%Hh%Mm%Ss\"), \".xlsx\")\r\n    },\r\n    content = function(file) {\r\n      saveWorkbook(resultado(), file, overwrite = TRUE)\r\n    }\r\n  )\r\n}\r\n\r\n# ===================================================================================\r\n# INICIA A APLICAÇÃO SHINY\r\n# ===================================================================================\r\nshinyApp(ui, server)\r\n","type":"text"}]
